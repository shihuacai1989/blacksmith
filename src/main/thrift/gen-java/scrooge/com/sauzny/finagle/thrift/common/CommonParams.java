/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.sauzny.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class CommonParams implements TBase<CommonParams, CommonParams._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CommonParams");

  private static final TField VERSION_FIELD_DESC = new TField("version", TType.STRING, (short)1);
  private static final TField ALIAS_NAME_FIELD_DESC = new TField("aliasName", TType.STRING, (short)2);
  private static final TField PARAMS_MAP_FIELD_DESC = new TField("paramsMap", TType.MAP, (short)3);
  private static final TField TRACE_ID_FIELD_DESC = new TField("traceId", TType.STRING, (short)4);


  public String version;
  public String aliasName;
  public Map<String,String> paramsMap;
  public String traceId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    VERSION((short)1, "version"),
    ALIAS_NAME((short)2, "aliasName"),
    PARAMS_MAP((short)3, "paramsMap"),
    TRACE_ID((short)4, "traceId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
  	return VERSION;
        case 2: // ALIAS_NAME
  	return ALIAS_NAME;
        case 3: // PARAMS_MAP
  	return PARAMS_MAP;
        case 4: // TRACE_ID
  	return TRACE_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new FieldMetaData("version", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ALIAS_NAME, new FieldMetaData("aliasName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PARAMS_MAP, new FieldMetaData("paramsMap", TFieldRequirementType.OPTIONAL,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.TRACE_ID, new FieldMetaData("traceId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CommonParams.class, metaDataMap);
  }


  public CommonParams() {
  }

  public CommonParams(
    String version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonParams(CommonParams other) {
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetAliasName()) {
      this.aliasName = other.aliasName;
    }
    if (other.isSetParamsMap()) {
      Map<String,String> __this__paramsMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.paramsMap.entrySet()) {
        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();
        String __this__paramsMap_copy_key = other_element_key;
        String __this__paramsMap_copy_value = other_element_value;
        __this__paramsMap.put(__this__paramsMap_copy_key, __this__paramsMap_copy_value);
      }
      this.paramsMap = __this__paramsMap;
    }
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
  }

  public CommonParams deepCopy() {
    return new CommonParams(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.aliasName = null;
    this.paramsMap = null;
    this.traceId = null;
  }

  public String getVersion() {
    return this.version;
  }

  public CommonParams setVersion(String version) {
    this.version = version;
    
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been asigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getAliasName() {
    return this.aliasName;
  }

  public CommonParams setAliasName(String aliasName) {
    this.aliasName = aliasName;
    
    return this;
  }

  public void unsetAliasName() {
    this.aliasName = null;
  }

  /** Returns true if field aliasName is set (has been asigned a value) and false otherwise */
  public boolean isSetAliasName() {
    return this.aliasName != null;
  }

  public void setAliasNameIsSet(boolean value) {
    if (!value) {
      this.aliasName = null;
    }
  }

  public int getParamsMapSize() {
    return (this.paramsMap == null) ? 0 : this.paramsMap.size();
  }

  public void putToParamsMap(String key, String val) {
    if (this.paramsMap == null) {
      this.paramsMap = new HashMap<String,String>();
    }
    this.paramsMap.put(key, val);
  }

  public Map<String,String> getParamsMap() {
    return this.paramsMap;
  }

  public CommonParams setParamsMap(Map<String,String> paramsMap) {
    this.paramsMap = paramsMap;
    
    return this;
  }

  public void unsetParamsMap() {
    this.paramsMap = null;
  }

  /** Returns true if field paramsMap is set (has been asigned a value) and false otherwise */
  public boolean isSetParamsMap() {
    return this.paramsMap != null;
  }

  public void setParamsMapIsSet(boolean value) {
    if (!value) {
      this.paramsMap = null;
    }
  }

  public String getTraceId() {
    return this.traceId;
  }

  public CommonParams setTraceId(String traceId) {
    this.traceId = traceId;
    
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been asigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;
    case ALIAS_NAME:
      if (value == null) {
        unsetAliasName();
      } else {
        setAliasName((String)value);
      }
      break;
    case PARAMS_MAP:
      if (value == null) {
        unsetParamsMap();
      } else {
        setParamsMap((Map<String,String>)value);
      }
      break;
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();
    case ALIAS_NAME:
      return getAliasName();
    case PARAMS_MAP:
      return getParamsMap();
    case TRACE_ID:
      return getTraceId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case ALIAS_NAME:
      return isSetAliasName();
    case PARAMS_MAP:
      return isSetParamsMap();
    case TRACE_ID:
      return isSetTraceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonParams)
      return this.equals((CommonParams)that);
    return false;
  }

  public boolean equals(CommonParams that) {
    if (that == null)
      return false;
    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }
    boolean this_present_aliasName = true && this.isSetAliasName();
    boolean that_present_aliasName = true && that.isSetAliasName();
    if (this_present_aliasName || that_present_aliasName) {
      if (!(this_present_aliasName && that_present_aliasName))
        return false;
      if (!this.aliasName.equals(that.aliasName))
        return false;
    }
    boolean this_present_paramsMap = true && this.isSetParamsMap();
    boolean that_present_paramsMap = true && that.isSetParamsMap();
    if (this_present_paramsMap || that_present_paramsMap) {
      if (!(this_present_paramsMap && that_present_paramsMap))
        return false;
      if (!this.paramsMap.equals(that.paramsMap))
        return false;
    }
    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_version = true && (isSetVersion());
    builder.append(present_version);
    if (present_version)
      builder.append(version);
    boolean present_aliasName = true && (isSetAliasName());
    builder.append(present_aliasName);
    if (present_aliasName)
      builder.append(aliasName);
    boolean present_paramsMap = true && (isSetParamsMap());
    builder.append(present_paramsMap);
    if (present_paramsMap)
      builder.append(paramsMap);
    boolean present_traceId = true && (isSetTraceId());
    builder.append(present_traceId);
    if (present_traceId)
      builder.append(traceId);
    return builder.toHashCode();
  }

  public int compareTo(CommonParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommonParams typedOther = (CommonParams)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliasName()).compareTo(typedOther.isSetAliasName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasName()) {
      lastComparison = TBaseHelper.compareTo(this.aliasName, typedOther.aliasName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamsMap()).compareTo(typedOther.isSetParamsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamsMap()) {
      lastComparison = TBaseHelper.compareTo(this.paramsMap, typedOther.paramsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = TBaseHelper.compareTo(this.traceId, typedOther.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // VERSION
          if (field.type == TType.STRING) {
            this.version = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ALIAS_NAME
          if (field.type == TType.STRING) {
            this.aliasName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PARAMS_MAP
          if (field.type == TType.MAP) {
            {
            TMap _map0 = iprot.readMapBegin();
            this.paramsMap = new HashMap<String,String>(2*_map0.size);
            for (int _i1 = 0; _i1 < _map0.size; ++_i1)
            {
              String _key2;
              String _val3;
              _key2 = iprot.readString();
              _val3 = iprot.readString();
              this.paramsMap.put(_key2, _val3);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TRACE_ID
          if (field.type == TType.STRING) {
            this.traceId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.version != null) {
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeString(this.version);
      oprot.writeFieldEnd();
    }
    if (this.aliasName != null) {
      if (isSetAliasName()) {
        oprot.writeFieldBegin(ALIAS_NAME_FIELD_DESC);
        oprot.writeString(this.aliasName);
        oprot.writeFieldEnd();
      }
    }
    if (this.paramsMap != null) {
      if (isSetParamsMap()) {
        oprot.writeFieldBegin(PARAMS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.paramsMap.size()));
          for (Map.Entry<String, String> _iter4 : this.paramsMap.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.traceId != null) {
      if (isSetTraceId()) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(this.traceId);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonParams(");
    boolean first = true;
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetAliasName()) {
      if (!first) sb.append(", ");
      sb.append("aliasName:");
      if (this.aliasName == null) {
        sb.append("null");
      } else {
        sb.append(this.aliasName);
      }
      first = false;
      }
    if (isSetParamsMap()) {
      if (!first) sb.append(", ");
      sb.append("paramsMap:");
      if (this.paramsMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsMap);
      }
      first = false;
      }
    if (isSetTraceId()) {
      if (!first) sb.append(", ");
      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
